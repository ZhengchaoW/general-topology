"""Schedule generator for Fall 2025 General Topology course.

Outputs `site/schedule.html` listing meeting dates (Mon/Wed/Fri) from
2025-08-25 through 2025-12-10 inclusive while skipping Labor Day and
Thanksgiving recess week. Renders a table: Date | Class Topic | Remark.

Optional topics file: create `schedule_topics.csv` with columns:
    date,topic,remark
Date formats accepted: YYYY-MM-DD, M/D, or M/D/YY (year 2025 assumed if
omitted / two-digit expanded to 20xx).

Usage:
    python3 schedule_generator.py
"""
from datetime import date, timedelta
from typing import List, Dict, Optional
import csv
import os

# --- Config
COURSE_TITLE = "General Topology (Fall 2025)"
START_DATE = date(2025, 8, 25)
END_DATE = date(2025, 12, 10)
# Weekday numbers: Monday=0 ... Sunday=6. Mon/Wed/Fri
MEETING_WEEKDAYS = [0, 2, 4]

# Explicit single dates to skip
SKIP_DATES = [date(2025, 9, 8)]  # Labor Day (Monday)

# Thanksgiving recess week anchor
SKIP_WEEKS_ANCHORS = [date(2025, 11, 24)]

OUTPUT_PATH = "site/schedule.html"
TOPICS_CSV = "schedule_topics.csv"  # optional CSV providing topics/remarks

# --- Helpers

def daterange(start: date, end: date):
    curr = start
    while curr <= end:
        yield curr
        curr += timedelta(days=1)

def week_number_for(d: date) -> int:
    return d.isocalendar()[1]

skip_week_numbers = {week_number_for(d) for d in SKIP_WEEKS_ANCHORS}

# --- Collect meetings
meetings: List[date] = []
for d in daterange(START_DATE, END_DATE):
    if d.weekday() in MEETING_WEEKDAYS:
        if d in SKIP_DATES:
            continue
        if week_number_for(d) in skip_week_numbers:
            continue
        meetings.append(d)

# --- Load optional topics CSV
topics: Dict[str, Dict[str, str]] = {}
if os.path.exists(TOPICS_CSV):
    with open(TOPICS_CSV, newline='', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            raw = (row.get('date') or '').strip()
            if not raw:
                continue
            tokens = raw.replace('-', '/').split('/')
            parsed: Optional[date] = None
            try:
                if len(tokens) == 3:
                    if len(tokens[0]) == 4:  # yyyy/mm/dd
                        y, m, d_ = int(tokens[0]), int(tokens[1]), int(tokens[2])
                    else:  # mm/dd/yy
                        m, d_, yy = int(tokens[0]), int(tokens[1]), int(tokens[2])
                        y = 2000 + yy if yy < 100 else yy
                    parsed = date(y, m, d_)
                elif len(tokens) == 2:
                    m, d_ = int(tokens[0]), int(tokens[1])
                    parsed = date(START_DATE.year, m, d_)
            except ValueError:
                parsed = None
            if parsed:
                topics[parsed.isoformat()] = {
                    'topic': (row.get('topic') or '').strip(),
                    'remark': (row.get('remark') or '').strip()
                }

def fmt_display(d: date) -> str:
    return f"{d.strftime('%b')} {d.day} ({d.strftime('%a')})"

header = f"""<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n  <title>{COURSE_TITLE} — Schedule</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"container\">\n    <header>\n      <h1>{COURSE_TITLE}</h1>\n      <p class=\"term\">Term: Fall 2025 · {START_DATE.isoformat()} — {END_DATE.isoformat()}</p>\n      <nav><a href=\"index.html\">Home</a></nav>\n    </header>\n    <main>\n      <h2>Schedule</h2>\n      <p class=\"note\">Meetings Monday/Wednesday/Friday (unless noted). Skipped: {', '.join(d.isoformat() for d in SKIP_DATES)}; Thanksgiving recess week ({', '.join(d.isoformat() for d in SKIP_WEEKS_ANCHORS)}) not shown.</p>\n      <table class=\"schedule-table\">\n        <thead><tr><th>Date</th><th>Class Topic</th><th>Remark</th></tr></thead>\n        <tbody>\n"""

rows: List[str] = []
prev_week: Optional[int] = None
for d in meetings:
    wk = week_number_for(d)
    if prev_week is not None and wk != prev_week:
        rows.append("          <tr class=\"week-sep\"><td colspan=\"3\"></td></tr>")
    prev_week = wk
    info = topics.get(d.isoformat(), {})
    topic_txt = info.get('topic') or 'TBD'
    remark_txt = info.get('remark') or ''
    rows.append(f"          <tr><td class=\"date\">{fmt_display(d)}</td><td class=\"topic\">{topic_txt}</td><td class=\"remark\">{remark_txt}</td></tr>")

footer = """        </tbody>\n      </table>\n    </main>\n    <footer><p>Generated by schedule_generator.py · Edit schedule_topics.csv to customize topics.</p></footer>\n  </div>\n</body>\n</html>\n"""

os.makedirs(os.path.dirname(OUTPUT_PATH), exist_ok=True)
with open(OUTPUT_PATH, 'w', encoding='utf-8') as f:
    f.write(header + "\n".join(rows) + footer)

print(f"Wrote schedule with {len(meetings)} meetings (Mon/Wed/Fri) to {OUTPUT_PATH}")
